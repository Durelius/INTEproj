package battle

import (
	"github.com/Durelius/INTEproj/internal/enemy"
	"github.com/Durelius/INTEproj/internal/player"
)


type Battle struct {
	Player *player.Player
	Enemy  enemy.Enemy
	playerTurn   bool // true if it's player's turn, false if enemy's turn
}


// Turn should be randomly generated by the gamestate when creating a new battle.
func New(p *player.Player, e enemy.Enemy, turn bool) *Battle {
	return &Battle{
		Player: p,	
		Enemy:  e,
		playerTurn:   turn,
	}
}


// ProgressFight advances the fight by one turn. Either the player or the enemy attacks, depending on whose turn it is.
func(b *Battle) ProgressFight() {
	if b.playerTurn {
		// Player's turn
		damage := b.Player.GetDamage()
		b.Enemy.TakeDamage(damage)
		b.playerTurn = false
	} else {
		// Enemy's turn
		damage := b.Enemy.GetDamage()
		b.Player.ReceiveDamage(damage)
		b.playerTurn = true
	}
}


// Check if the battle is over (either the player or the enemy has 0 or less health)
func (b *Battle) IsOver() bool {
	return b.Player.IsDead() || b.Enemy.IsDead()
}